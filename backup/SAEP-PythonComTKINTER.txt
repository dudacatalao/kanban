import tkinter as tk
from tkinter import ttk, messagebox
import mysql.connector
import re

# Configurações do banco de dados
DB_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "senai",
    "database": "gerenciador_tarefas"
}

# Função para conectar ao banco de dados
def conectar_bd():
    return mysql.connector.connect(**DB_CONFIG)

# Função para validar e-mail
def validar_email(email):
    padrao = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(padrao, email) is not None

# Tela principal (gerenciamento de tarefas com menu)
# Função para carregar tarefas
def carregar_tarefas(tarefas_frame, colunas_frames):
    # Limpar tarefas existentes
    for coluna_frame in colunas_frames.values():
        for widget in coluna_frame.winfo_children()[1:]:  # Ignora o título da coluna
            widget.destroy()

    # Conectar ao banco de dados e buscar tarefas
    conexao = conectar_bd()
    cursor = conexao.cursor()
    cursor.execute("""
        SELECT t.id_tarefa, t.descricao, t.setor, t.prioridade, t.status, u.nome
        FROM tarefa t
        JOIN usuario u ON t.id_usuario = u.id_usuario
    """)
    tarefas = cursor.fetchall()
    conexao.close()

    # Distribuir tarefas entre as colunas
    for tarefa in tarefas:
        id_tarefa, descricao, setor, prioridade, status, usuario = tarefa
        coluna_frame = colunas_frames[status]

        # Exibir tarefa
        tarefa_frame = tk.Frame(coluna_frame, bg="#FFFFFF", bd=1, relief="solid")
        tarefa_frame.pack(fill="x", pady=5, padx=5)

        tk.Label(tarefa_frame, text=f"Descrição: {descricao}", bg="#FFFFFF", fg="#000000").pack(anchor="w")
        tk.Label(tarefa_frame, text=f"Setor: {setor} | Prioridade: {prioridade}", bg="#FFFFFF", fg="#000000").pack(anchor="w")
        tk.Label(tarefa_frame, text=f"Usuário: {usuario}", bg="#FFFFFF", fg="#000000").pack(anchor="w")

        # Botões de editar e excluir
        btn_frame = tk.Frame(tarefa_frame, bg="#FFFFFF")
        btn_frame.pack(anchor="e", pady=2)

        tk.Button(btn_frame, text="Editar", bg="#0056b3", fg="#FFFFFF",
                  command=lambda id_t=id_tarefa: editar_tarefa(id_t, tarefas_frame, colunas_frames)).pack(side="left", padx=2)
        tk.Button(btn_frame, text="Excluir", bg="#0056b3", fg="#FFFFFF",
                  command=lambda id_t=id_tarefa: excluir_tarefa(id_t, tarefas_frame, colunas_frames)).pack(side="left", padx=2)


# Função para carregar tarefas
def tela_principal():
    root = tk.Tk()
    root.title("Gerenciamento de Tarefas")
    root.geometry("900x600")
    root.configure(bg="#FFFFFF")  # Fundo branco

    # Menu
    menu = tk.Menu(root, bg="#0056b3", fg="#FFFFFF", tearoff=0)
    root.config(menu=menu)

    # Frame de gerenciamento de tarefas
    tarefas_frame = tk.Frame(root, bg="#FFFFFF")
    tarefas_frame.pack(fill="both", expand=True, padx=10, pady=10)

    # Criar colunas para as tarefas
    colunas = ["a fazer", "fazendo", "pronto"]
    colunas_frames = {}
    for coluna in colunas:
        frame = tk.Frame(tarefas_frame, bg="#FFFFFF", bd=2, relief="groove")
        frame.pack(side="left", fill="both", expand=True, padx=5)
        colunas_frames[coluna] = frame

        tk.Label(frame, text=coluna.upper(), bg="#0056b3", fg="#FFFFFF").pack(fill="x")

    # Menu com funções que agora recebem as referências corretas
    menu.add_command(label="Cadastro de Usuários", command=lambda: cadastro_usuarios(root, tarefas_frame, colunas_frames))
    menu.add_command(label="Cadastro de Tarefas", command=lambda: cadastro_tarefas(root, tarefas_frame, colunas_frames))
    menu.add_command(label="Atualizar Tarefas", command=lambda: carregar_tarefas(tarefas_frame, colunas_frames))

    # Carregar as tarefas no início
    carregar_tarefas(tarefas_frame, colunas_frames)

    root.mainloop()

# Função para editar tarefas
def editar_tarefa(id_tarefa, tarefas_frame, colunas_frames):
    # Obter os dados da tarefa para preencher os campos
    conexao = conectar_bd()
    cursor = conexao.cursor()
    cursor.execute("""
        SELECT t.descricao, t.setor, t.prioridade, t.status, u.nome, u.id_usuario
        FROM tarefa t
        JOIN usuario u ON t.id_usuario = u.id_usuario
        WHERE t.id_tarefa = %s
    """, (id_tarefa,))
    tarefa = cursor.fetchone()
    conexao.close()

    if not tarefa:
        messagebox.showerror("Erro", "Tarefa não encontrada.")
        return

    descricao_atual, setor_atual, prioridade_atual, status_atual, usuario_atual, usuario_id_atual = tarefa

    # Criar janela de edição
    janela = tk.Toplevel()
    janela.title("Editar Tarefa")
    janela.geometry("500x400")
    janela.configure(bg="#FFFFFF")

    tk.Label(janela, text="Descrição", bg="#FFFFFF", fg="#000000").grid(row=0, column=0, padx=10, pady=10)
    descricao = tk.Entry(janela, width=40)
    descricao.insert(0, descricao_atual)  # Preencher com o valor atual
    descricao.grid(row=0, column=1)

    tk.Label(janela, text="Setor", bg="#FFFFFF", fg="#000000").grid(row=1, column=0, padx=10, pady=10)
    setor = tk.Entry(janela, width=40)
    setor.insert(0, setor_atual)  # Preencher com o valor atual
    setor.grid(row=1, column=1)

    tk.Label(janela, text="Prioridade", bg="#FFFFFF", fg="#000000").grid(row=2, column=0, padx=10, pady=10)
    prioridade = ttk.Combobox(janela, values=["baixa", "média", "alta"])
    prioridade.set(prioridade_atual)  # Preencher com o valor atual
    prioridade.grid(row=2, column=1)

    tk.Label(janela, text="Status", bg="#FFFFFF", fg="#000000").grid(row=3, column=0, padx=10, pady=10)
    status = ttk.Combobox(janela, values=["a fazer", "fazendo", "pronto"])
    status.set(status_atual)  # Preencher com o valor atual
    status.grid(row=3, column=1)

    tk.Label(janela, text="Usuário", bg="#FFFFFF", fg="#000000").grid(row=4, column=0, padx=10, pady=10)
    usuarios = listar_usuarios()
    usuario_dropdown = ttk.Combobox(janela, values=[f"{u[1]} (ID {u[0]})" for u in usuarios])
    usuario_dropdown.set(f"{usuario_atual} (ID {usuario_id_atual})")  # Preencher com o valor atual
    usuario_dropdown.grid(row=4, column=1)

    # Função para salvar as alterações
    def salvar_edicao():
        if not descricao.get() or not setor.get() or not prioridade.get() or not status.get() or not usuario_dropdown.get():
            messagebox.showerror("Erro", "Todos os campos são obrigatórios.")
            return

        try:
            novo_usuario_id = int(usuario_dropdown.get().split("(ID ")[1].strip(")"))
        except (IndexError, ValueError):
            messagebox.showerror("Erro", "Por favor, selecione um usuário válido.")
            return

        conexao = conectar_bd()
        cursor = conexao.cursor()
        try:
            cursor.execute("""
                UPDATE tarefa
                SET descricao = %s, setor = %s, prioridade = %s, status = %s, id_usuario = %s
                WHERE id_tarefa = %s
            """, (descricao.get(), setor.get(), prioridade.get(), status.get(), novo_usuario_id, id_tarefa))
            conexao.commit()
            messagebox.showinfo("Sucesso", "Tarefa editada com sucesso!")
            janela.destroy()
            carregar_tarefas(tarefas_frame, colunas_frames)  # Atualizar a lista de tarefas
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar alterações: {e}")
        finally:
            conexao.close()

    tk.Button(janela, text="Salvar Alterações", bg="#0056b3", fg="#FFFFFF", command=salvar_edicao).grid(row=5, columnspan=2, pady=20)


# Função para excluir tarefas
def excluir_tarefa(id_tarefa, tarefas_frame, colunas_frames):
    if messagebox.askyesno("Excluir Tarefa", "Deseja realmente excluir esta tarefa?"):
        conexao = conectar_bd()
        cursor = conexao.cursor()
        try:
            cursor.execute("DELETE FROM tarefa WHERE id_tarefa = %s", (id_tarefa,))
            conexao.commit()
            messagebox.showinfo("Sucesso", "Tarefa excluída com sucesso!")
            carregar_tarefas(tarefas_frame, colunas_frames)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao excluir tarefa: {e}")
        finally:
            conexao.close()

# Função para cadastrar usuários
def cadastro_usuarios(root, tarefas_frame, colunas_frames):
    janela = tk.Toplevel(root)
    janela.title("Cadastro de Usuários")
    janela.geometry("400x200")
    janela.configure(bg="#FFFFFF")

    # Garantir que a janela permaneça à frente
    janela.transient(root)
    janela.grab_set()
    janela.focus_set()

    tk.Label(janela, text="Nome", bg="#FFFFFF", fg="#000000").grid(row=0, column=0, padx=10, pady=10)
    nome = tk.Entry(janela)
    nome.grid(row=0, column=1)

    tk.Label(janela, text="E-mail", bg="#FFFFFF", fg="#000000").grid(row=1, column=0, padx=10, pady=10)
    email = tk.Entry(janela)
    email.grid(row=1, column=1)

    def salvar_usuario():
        if not nome.get() or not email.get():
            messagebox.showerror("Erro", "Todos os campos são obrigatórios.")
            return
        if not validar_email(email.get()):
            messagebox.showerror("Erro", "E-mail inválido.")
            return
        conexao = conectar_bd()
        cursor = conexao.cursor()
        try:
            cursor.execute("INSERT INTO usuario (nome, email) VALUES (%s, %s)", (nome.get(), email.get()))
            conexao.commit()
            messagebox.showinfo("Sucesso", "Usuário cadastrado com sucesso!")
            janela.destroy()
            carregar_tarefas(tarefas_frame, colunas_frames)  # Atualiza tarefas automaticamente
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar: {e}")
        finally:
            conexao.close()

    tk.Button(janela, text="Salvar", bg="#0056b3", fg="#FFFFFF", command=salvar_usuario).grid(row=2, columnspan=2, pady=10)

# Função para cadastrar tarefas
def cadastro_tarefas(root, tarefas_frame, colunas_frames):
    janela = tk.Toplevel(root)
    janela.title("Cadastro de Tarefas")
    janela.geometry("500x300")
    janela.configure(bg="#FFFFFF")

    tk.Label(janela, text="Descrição", bg="#FFFFFF", fg="#000000").grid(row=0, column=0, padx=10, pady=10)
    descricao = tk.Entry(janela, width=40)
    descricao.grid(row=0, column=1)

    tk.Label(janela, text="Setor", bg="#FFFFFF", fg="#000000").grid(row=1, column=0, padx=10, pady=10)
    setor = tk.Entry(janela, width=40)
    setor.grid(row=1, column=1)

    tk.Label(janela, text="Prioridade", bg="#FFFFFF", fg="#000000").grid(row=2, column=0, padx=10, pady=10)
    prioridade = ttk.Combobox(janela, values=["baixa", "média", "alta"])
    prioridade.grid(row=2, column=1)

    tk.Label(janela, text="Usuário", bg="#FFFFFF", fg="#000000").grid(row=3, column=0, padx=10, pady=10)
    usuarios = listar_usuarios()
    usuario_dropdown = ttk.Combobox(janela, values=[f"{u[1]} (ID {u[0]})" for u in usuarios])
    usuario_dropdown.grid(row=3, column=1)

    def salvar_tarefa():
        if not descricao.get() or not setor.get() or not prioridade.get() or not usuario_dropdown.get():
            messagebox.showerror("Erro", "Todos os campos são obrigatórios.")
            return
        try:
            usuario_id = int(usuario_dropdown.get().split("(ID ")[1].strip(")"))
        except (IndexError, ValueError):
            messagebox.showerror("Erro", "Por favor, selecione um usuário válido.")
            return
        conexao = conectar_bd()
        cursor = conexao.cursor()
        try:
            cursor.execute("""
                INSERT INTO tarefa (id_usuario, descricao, setor, prioridade)
                VALUES (%s, %s, %s, %s)
            """, (usuario_id, descricao.get(), setor.get(), prioridade.get()))
            conexao.commit()
            messagebox.showinfo("Sucesso", "Tarefa cadastrada com sucesso!")
            janela.destroy()
            carregar_tarefas(tarefas_frame, colunas_frames)  # Atualiza tarefas automaticamente
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar: {e}")
        finally:
            conexao.close()

    tk.Button(janela, text="Salvar", bg="#0056b3", fg="#FFFFFF", command=salvar_tarefa).grid(row=4, columnspan=2, pady=10)

# Função para listar usuários
def listar_usuarios():
    conexao = conectar_bd()
    cursor = conexao.cursor()
    cursor.execute("SELECT id_usuario, nome FROM usuario")
    usuarios = cursor.fetchall()
    conexao.close()
    return usuarios

# Inicializar o sistema
if __name__ == "__main__":
    tela_principal()
